{"componentChunkName":"component---src-templates-post-jsx","path":"/custom-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Lanky.Blog"}},"markdownRemark":{"id":"f69942f3-8e47-5ac5-b493-bb9ba32d41b9","excerpt":"상황 : useNavigate()를 모듈로 변경하고 싶어요. react-router-dom의 useNavigate는 사용자의 URL를 변경하는 명령형 메서드입니다. (v6 기준) 하지만 사용하는 곳마다 매번 이렇게 사용해야하므로 모듈화를 시키고 싶었습니다. 이렇게 redirect라는 함수를 만들었습니다. 원하는 곳에서 redirect(URL)만 호출하면 …","html":"<h2>상황 : useNavigate()를 모듈로 변경하고 싶어요.</h2>\n<p>react-router-dom의 useNavigate는 사용자의 URL를 변경하는 명령형 메서드입니다. (v6 기준)</p>\n<Link>와 비슷한 역할을 합니다.  사용방법은 아래와 같습니다.\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useNavigate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">replace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 사용하는 곳마다 매번 이렇게 사용해야하므로 모듈화를 시키고 싶었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// redirect.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useNavigate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">redirect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">replace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 사용하는 컴포넌트</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> redirect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../redirect\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>사용자정보<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 redirect라는 함수를 만들었습니다. 원하는 곳에서 redirect(URL)만 호출하면 됩니다.</p>\n<p>저는 서버로부터 받은 데이터에 사용자의 정보가 있으면 사용자의 URL를 변경하려고 합니다.</p>\n<h2>오류: eslint : 정체 모를 함수에서 훅 사용은 자제하실께요🙏</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Line 4:20: React Hook \"useNavigate\" is called in function \"redirect\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\" react-hooks/rules-of-hooks\n\n// 위의 에러를 번역했습니다.\n리액트 함수 컴포넌트도 아니고 커스텀 훅 함수도 아닌 \"redirect\" 함수에서 리액트 훅 \"useNavigate\"가 호출되었습니다. 리액트 컴포넌트 이름은 대문자로 시작해야 합니다. 리액트 훅 이름은 \"use\"라는 단어로 시작해야 합니다. react-hooks/rules-of-hooks</code></pre></div>\n<p>침착하게 한글 오류를 읽고 생각을 해보도록 합시다.</p>\n<h2>원인: 고객님 공식문서 숙지 부탁드려요 🙏</h2>\n<p>\"useNavigate\" 리액트 훅이 \"redirect\" 함수에서 호출되었지만, \"redirect\" 함수는 리액트 함수 컴포넌트도 아니고 커스텀 리액트 훅도 아닙니다.</p>\n<p>오류 메시지가 친절하게 알려주듯이, 리액트 컴포넌트 이름은 반드시 대문자로 시작해야 하고, 리액트 훅 이름은 반드시 \"use\"이라는 단어로 시작해야 합니다.</p>\n<p>그러니까 함수 컴포넌트로 변경하던지 커스텀 훅 명명 규칙을 따라달라는 거죠. 거기다가 너무 친절하게 <del>인스타공지 아니</del>  <a href=\"https://legacy.reactjs.org/docs/hooks-rules.html\">공식문서 숙지</a>를 부탁하는 군요. (참고로 몇달전에 <a href=\"https://react.dev/\">React 공식문서</a>가 새단장을 했습니다)</p>\n<p>공식문서는 두 가지의 룰을 지켜달라고 합니다.</p>\n<p>✅ 최상위 레벨에서만 훅 호출</p>\n<p>✅ 리액트 함수에서만 훅 호출</p>\n<h3>최상위 레벨에서만 훅 호출</h3>\n<p>공식문서를 읽어보시면 루프, 조건문 또는 중첩 함수 내부에서 호출하지 말고 초기 리턴이 오기전에 최상위 수준에서 호출하라고 합니다. 컴포넌트가 렌더링될 때마다 훅이 같은 순서로 호출되는 것을 보장할 수 있다고 하네요.</p>\n<p>공식문서에 있는 예시를 가지고 왔습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 🔴 조건문 내부에서 useEffect라는 훅을 호출한 나쁜 예시</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 👍 useEffect라는 훅 내부에서 조건문을 사용하는 좋은 예시</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">persistForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>리액트 함수에서만 훅 호출</h3>\n<p>훅을 사용할 수 있는 함수에서만 사용하라는 이야기입니다. 아래 두 규칙을 지키는 함수에서만 가능합니다.</p>\n<p>✅ 리액트 함수 컴포넌트에서 훅을 호출합니다. (대문자로 시작하는 함수 컴포넌트)</p>\n<p>✅ 커스텀 훅에서 훅을 호출할 수 있습니다. (useRedirect ⭕️, redirect ❌)</p>\n<p>함수 컴포넌트 또는 use~~~로 시작하는 함수(우리는 커스텀 훅이라고 부르기로 했어요)에서만 사용할 수 있다고 하네요.</p>\n<h2>해결책 : 문제해결은 아니지만 오류에 대한 해결책(?)</h2>\n<p>모듈화를 하겠다고 만든 코드가 알고보니 커스텀 훅인 상황이 된겁니다.</p>\n<p>이제 근본 원인을 파악했으니 오류를 해결해보도록 하겠습니다. 이 오류를 해결하려면 두 가지 옵션이 있습니다:</p>\n<ol>\n<li>\n<p><strong>\"redirect\"를 리액트 함수 컴포넌트로 변환하기:</strong> 1.</p>\n<ul>\n<li>\"redirect\" 함수의 이름을 \"Redirect\"와 같이 대문자로 시작하도록 바꿉니다.</li>\n<li>이건 우리가 원하는 방향이 아닙니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>사용자 정의 리액트 훅 생성하기:</strong> 2.</p>\n<ul>\n<li>\"redirect\" 함수의 이름을 \"useRedirect\"와 같이 훅의 명명 규칙을 따르도록 바꿉니다.</li>\n<li>파일명도 야심차게 바꾸었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// useRedirect.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useRedirect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">replace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 사용하는 컴포넌트</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> redirect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../redirect\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>사용자정보<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>아…. 조건문에서 사용하지 말라고 했지…. 원하는 방향이지 사용할 수 없군요</li>\n</ul>\n</li>\n</ol>\n<p>그렇다면 조건문이 아닌 곳에서도 저렇게 사용할 수 있을까요?</p>\n<p>정답은 “아니요”입니다.  <code class=\"language-text\">const navigate = useNavigate();</code> 이것 또한 커스텀 훅이기 때문에 룰을 지켜야하기 때문에 안되는거죠.</p>\n<p>즉, 이 모듈을 사용할 수가 없습니다. 아래와 같이 사용하는 컴포넌트마다 훅을 만들어줘야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> redirect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../redirect\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>사용자정보<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">replace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>결론적으로: 배운 교훈</h2>\n<p>네. 제목이 곧 내용이었습니다. 오류는 해결했지만 문제해결을 못하게 된 거지요.</p>\n<p><code class=\"language-text\">const navigate = useNavigate();</code> 이것을 없애고 사용하려고 했지만 안타깝네요. 그래도 커스텀 훅을 만드는 규칙과 공식문서를 한번이라도 더 보게 되는 이벤트가 발생했네요. 만….족 못하지만 만족합니다 😂</p>","frontmatter":{"title":"정체 모를 함수에서 훅 사용은 자제 부탁드릴께요 🙏(Feat.인스타감성)","date":"May 01, 2023","update":"May 01, 2023","tags":["React","React-custom-hook","react-hooks/rules-of-hooks"],"series":null},"fields":{"slug":"/custom-hook/","readingTime":{"minutes":7.72}}},"seriesList":{"edges":[{"node":{"id":"5696f9ab-23f1-5e04-b1e2-745fe2afe93f","fields":{"slug":"/timestamp/"},"frontmatter":{"title":"시간대와 시간 표기법"}}},{"node":{"id":"f69942f3-8e47-5ac5-b493-bb9ba32d41b9","fields":{"slug":"/custom-hook/"},"frontmatter":{"title":"정체 모를 함수에서 훅 사용은 자제 부탁드릴께요 🙏(Feat.인스타감성)"}}}]},"previous":{"fields":{"slug":"/timestamp/"},"frontmatter":{"title":"시간대와 시간 표기법"}},"next":null},"pageContext":{"id":"f69942f3-8e47-5ac5-b493-bb9ba32d41b9","series":null,"previousPostId":"5696f9ab-23f1-5e04-b1e2-745fe2afe93f","nextPostId":null}},"staticQueryHashes":[]}