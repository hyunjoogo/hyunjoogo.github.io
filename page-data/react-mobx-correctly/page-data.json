{"componentChunkName":"component---src-templates-post-jsx","path":"/react-mobx-correctly/","result":{"data":{"site":{"siteMetadata":{"title":"Lanky.Blog"}},"markdownRemark":{"id":"71de7e2f-f425-5958-9f91-8b6b742fa727","excerpt":"지난 편에는 MobX Core 개념에 대해 다루어 보았습니다. 이제는 React에서 어떻게 사용할 수 있는지에 대해 알아보도록 하겠습니다. 자세한 내용은 공식문서 - MobX and React를 참조하시기 바랍니다. ✅ 과제 코드가 외부에 공개될 수도 있으므로 공식문서에 나온 예제로 예시를 보여드립니다. ✅ 해당 예제는 MobX 6 버전을 기반으로 작성되…","html":"<p>지난 편에는 MobX Core 개념에 대해 다루어 보았습니다. 이제는 React에서 어떻게 사용할 수 있는지에 대해 알아보도록 하겠습니다. 자세한 내용은 <a href=\"https://ko.mobx.js.org/react-integration.html\">공식문서 - MobX and React</a>를 참조하시기 바랍니다.</p>\n<p>✅ 과제 코드가 외부에 공개될 수도 있으므로 공식문서에 나온 예제로 예시를 보여드립니다.<br>\n✅ 해당 예제는 MobX 6 버전을 기반으로 작성되었습니다.</p>\n<hr>\n<h2><code class=\"language-text\">observer</code> 컴포넌트 사용하기</h2>\n<p>MobX는 React와 독립적으로 작동하지만, 일반적으로 React와 함께 사용합니다. 필수적으로 <code class=\"language-text\">mobx-react-lite</code> 또는  <code class=\"language-text\">mobx-react</code> 패키지를 설치해야 합니다.<br>\n<code class=\"language-text\">mobx-react</code> 가 <code class=\"language-text\">mobx-react-lite</code>보다 큰 패키지이고 추가 기능을 제공합니다.</p>\n<ol>\n<li>React 클래스 컴포넌트를 지원합니다.</li>\n<li><code class=\"language-text\">Provider</code> 그리고 <code class=\"language-text\">inject</code>를 제공합니다. React.createContext가 더 이상 필요하지 않습니다.</li>\n<li>명확한 observable <code class=\"language-text\">propTypes</code>.</li>\n</ol>\n<h3>사용방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react-lite\"</span> <span class=\"token comment\">// 또는 \"mobx-react\". </span>\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> ReactElement<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">observer Higher-Order Component</code> (observer 고차 컴포넌트: 이하 observer)를 사용하면 됩니다. 예제를 보면서 자세히 설명하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// TodosStore.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodosStore</span> <span class=\"token punctuation\">{</span>  \n\ttodos<span class=\"token operator\">:</span> Todo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token function\">makeObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>  \n\t\t\ttodos<span class=\"token operator\">:</span> observable<span class=\"token punctuation\">,</span>\n\t\t\tgetTotalTodos<span class=\"token operator\">:</span> computed\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n\t<span class=\"token punctuation\">}</span>  \n  \n\t<span class=\"token keyword\">get</span> <span class=\"token function\">getTotalTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// TodoListView.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-react-lite\"</span>\n\n<span class=\"token keyword\">const</span> todosStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodosStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> TodoListView <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoList</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 예제가 점점 길어지네요. 전편에 다루었던 Doubler 클래스의 이름만 살짝 바꾸었습니다.<br>\n이 observer는 React 컴포넌트를 자동으로 MobX의 Observable들과 연결하여 렌더링 시 자동으로 구독하게 만들어줍니다. 그 결과로, 컴포넌트는 Observable이 변경될 때만 다시 렌더링됩니다. 또한, 컴포넌트와 관련없는 변경이 있을 때에는 리렌더링이 발생하지 않습니다. 이로 인해, 컴포넌트에 읽지 않은 Observable에 대해서는 불필요한 리렌더링을 방지하는데 도움이 됩니다.</p>\n<p><code class=\"language-text\">memo</code>나 <code class=\"language-text\">useCallback</code>을 사용하여 불필요한 리렌더링을 방지하는 데 추가적인 코드를 작성할 필요가 없습니다. observer가 이를 자동으로 처리해주기 때문입니다.</p>\n<hr>\n<h2><code class=\"language-text\">observer</code> 컴포넌트에서 state 사용하기</h2>\n<h3>외부 state 사용하기</h3>\n<p><code class=\"language-text\">observer</code> 컴포넌트에서 외부 state 사용할 때는 3가지 방법을 사용할 수 있습니다.</p>\n<ol>\n<li>props로 받아서 사용</li>\n<li>\n<p>전역 변수 사용</p>\n<ul>\n<li>클래스 인스턴스를 export 하는 방식.</li>\n<li>단위 테스트를 복잡하게 할 수 있어서 React Context를 사용하는 것을 권장함</li>\n</ul>\n</li>\n<li>React context를 사용하여 전역 객체로 사용하기\n자세한 내용은 <a href=\"https://ko.mobx.js.org/react-integration.html#%EB%A1%9C%EC%BB%AC-%EB%B0%8F-%EC%99%B8%EB%B6%80-state\">공식문서</a>를 참조하시기 바랍니다.</li>\n</ol>\n<p>저는 React context를 사용하였고 todos의 아이템을 표시할 때는 props를 사용했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// useStore.ts</span>\n<span class=\"token keyword\">const</span> rootStoreContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n\ttodosStore<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodosStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n\tproblemsStore<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProblemsStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>rootStoreContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// App.tsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UiComponent</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// UI 컴포넌트</span>\n<span class=\"token keyword\">const</span> UiComponent <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> todosStore <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아래 설명의 시점</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>뭔가 허전하네요... 아....? 😅😅😅 <code class=\"language-text\">&lt;Provider /></code>가 없습니다. 하하하하\n그래도 작동은 했는데 왜 되었을까요?</p>\n<p>추측을 하자면 다음과 같습니다.</p>\n<ol>\n<li>UiComponent 컴포넌트에서 import 되는 순간 <code class=\"language-text\">TodosStore</code> 와 <code class=\"language-text\">ProblemsStore</code>의 클래스 인스턴스가 생성이 됩니다.</li>\n<li><code class=\"language-text\">createContext</code>로 Context 객체를 생성하고 <code class=\"language-text\">rootStoreContext</code>에 할당합니다.</li>\n<li>\n<p>호출하는 컴포넌트에 대한 컨텍스트 값을 반환하는 useStore 함수를 생성하고 export 합니다.</p>\n<ol>\n<li><a href=\"https://react.dev/reference/react/useContext#returns\">React 공식문서-useContext의 returns</a>에 따르면 트리에서 가장 가까운 <code class=\"language-text\">SomeContext.Provider</code>에 전달된 값을 리턴합니다. 이러한 <code class=\"language-text\">Provider</code>가 없으면 <code class=\"language-text\">createContext</code>에 전달한 값이 <code class=\"language-text\">defaultValue</code>가 되고 이 값을 리턴합니다.</li>\n<li>결과적으로 가까운 <code class=\"language-text\">SomeContext.Provider</code>가 없었으므로 <code class=\"language-text\">rootStoreContext</code>를 리턴합니다.</li>\n<li>그래서 UiComponent에서는 <code class=\"language-text\">rootStoreContext</code> 객체에 접근을 할 수 있었던 것이었습니다.</li>\n</ol>\n</li>\n</ol>\n<p>🫣🫣🫣🫣🫣🫣🫣🫣🫣🫣 부끄럽습니다. 호다닥 변경해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// useStore.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todosStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodosStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> problemsStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProblemsStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> rootStoreContext <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RootStore<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> RootStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>rootStoreContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// App.tsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rootStoreContext.Provider</span>  \n\t\t\t<span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> problemStore<span class=\"token punctuation\">,</span> similarityProblemsStore <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UiComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rootStoreContext.Provider</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// UI 컴포넌트</span>\n<span class=\"token keyword\">const</span> UiComponent <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> todosStore <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아래 설명의 시점</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>기능상에는 문제가 없었지만 UiComponent 안에 Provider가 더 있었다면 문제가 발생했을거라 생각합니다. <code class=\"language-text\">useContext</code>의 <code class=\"language-text\">defaultValue</code>가 어떻게 설정되는지 알 수 있었던 기회였습니다.</p>\n</blockquote>\n<h3><code class=\"language-text\">observer</code> 컴포넌트에서 만들어서 사용하기</h3>\n<p>이 내용은 내부에서 <code class=\"language-text\">observable state</code>를  생성하여 사용하는 것에 대한 내용입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> TimerView <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token comment\">// 객체에 observable()을 직접 씌워서 사용하는 방법</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>timer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  \n\t\t<span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n\t\t\t<span class=\"token literal-property property\">secondsPassed</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  \n\t\t\t<span class=\"token function\">increaseTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>secondsPassed<span class=\"token operator\">++</span>  \n\t\t\t<span class=\"token punctuation\">}</span>  \n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// const [store] = useState(() => observable({ /* something */}))</span>\n\t<span class=\"token comment\">// `mobx-react-lite` 패키지의 `useLocalObservable`hook을 사용하는 방법</span>\n\t<span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">useLocalObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token literal-property property\">secondsPassed</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  \n\t\t<span class=\"token function\">increaseTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>secondsPassed<span class=\"token operator\">++</span>  \n\t\t<span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Seconds passed: </span><span class=\"token punctuation\">{</span>timer<span class=\"token punctuation\">.</span>secondsPassed<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3><code class=\"language-text\">observable state</code>를 내부에서 만들어 사용할 필요까지 있을까?</h3>\n<p>공식문서에도 나온 내용을 집고 넘어가야 할 듯합니다.</p>\n<blockquote>\n<p>로딩 state, 선택 등과 같은 UI state만 캡쳐하는 state는 <a href=\"https://reactjs.org/docs/hooks-state.html\"><code class=\"language-text\">useState</code> hook</a>을 사용하는 것이 더 좋습니다. 그렇게 하면 추후에 React suspense 기능을 사용할 수 있게 됩니다.</p>\n</blockquote>\n<p>이 내용에 의하면 단순하게 몇번째 index의 아이템이 선택되었거나 어떤 탭이 선택되었다는 state는 useState를 사용하라는 말입니다.</p>\n<hr>\n<h2>항상 <code class=\"language-text\">observer</code> 컴포넌트 안에서 observable을 읽기</h2>\n<p><code class=\"language-text\">observer</code>를 언제 사용해야 하는지에 대한 것입니다. <code class=\"language-text\">observer</code>는 감싸고 있는 컴포넌트만 개선하며, 감싸고 있는 컴포넌트를 호출하는 컴포넌트를 개선하지 않습니다. 또한 모든 컴포넌트를 <code class=\"language-text\">observer</code>로 감싸는 행동은 비효율적이지 않기 때문에 걱정하실 필요가 없습니다.\n그래도 <code class=\"language-text\">observable</code> 데이터가 필요없는 곳에서는 감싸지 않아야 할 것입니다.</p>\n<h3>가능한 한 늦게 객체에서 값 읽기</h3>\n<p><code class=\"language-text\">observer</code> 컴포넌트로 observable 데이터를 보낼 때는 풀어서 보내지 마세요. ❌<br>\n<code class=\"language-text\">observer</code> 컴포넌트 내부에서 읽는 것이 아니라 외부에서 읽히면 추적되지 않습니다. 그래서 변경사항에 반응하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span> \n\ttitle <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span> \n\tdone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> \n\t\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t\t<span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n\n나쁜 예 ❌\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObserverComponent</span></span> <span class=\"token attr-name\">done</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n좋은 예 ✅ <span class=\"token comment\">// 안에서 풀어서 사용하세요. </span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObserverComponent</span></span> <span class=\"token attr-name\">todo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>반대로 일반 컴포넌트로 observable 데이터를 보낼 때는 풀어서 일반 데이터로 보냅니다.  ✅</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">나쁜 예 ❌ \n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NonObserverComponent</span></span> <span class=\"token attr-name\">todo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n\n좋은 예 ✅\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NonObserverComponent</span></span> <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> todo<span class=\"token punctuation\">.</span>done\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2>문제해결 방법</h2>\n<p>공식문서 보시면 절망을 외치는 저의 모습이 담겨져있었습니다.</p>\n<blockquote>\n<p>도와주세요. 컴포넌트가 리렌더링 되지 않아요...</p>\n</blockquote>\n<p>대부분이 <code class=\"language-text\">observer</code>를 붙이지 않아서 생기는 문제였습니다. 대부분의 컴포넌트들이 observable한 데이터를 사용하다보니 <code class=\"language-text\">observer</code>는 거의 다 붙습니다.<br>\n그리고 디버깅을 위해 <a href=\"https://ko.mobx.js.org/configuration.html#linting-options\">MobX 설정</a>은 꼭 해보시기 바랍니다.</p>\n<hr>\n<h2>리액트 컴포넌트 렌더링 최적화 🚀</h2>\n<p>공식문서에서 실제로 이렇게 써져있습니다.</p>\n<blockquote>\n<p>실제로 문제가 발생한 경우에만 성능을 우선시하세요!</p>\n</blockquote>\n<p>워낙 알아서 하니까 신경쓰지 말라는 이야기죠. 🤣  그래도 알아두면 피와 살이 될 것입니다.</p>\n<h3>컴포넌트를 최소화하여 사용하세요.</h3>\n<p>이 내용은 컴포넌트의 재사용성을 생각해서라도 필요하다고 봅니다.</p>\n<h3>전용 컴포넌트들을 사용하여 리스트를 렌더링하세요.</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 나쁜 예 ❌</span>\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todos<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>  \n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n\t\t</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">  \n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n\t\t\t</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>  \n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoView</span></span> <span class=\"token attr-name\">todo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>  \n\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">  \n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token comment\">// 좋은 예 ✅</span>\n<span class=\"token keyword\">const</span> MyComponent <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todos<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>  \n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n\t\t</span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">  \n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodosView</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">  \n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n  \n<span class=\"token keyword\">const</span> TodosView <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todos <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>  \n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n\t</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>  \n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoView</span></span> <span class=\"token attr-name\">todo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>  \n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">  \n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>나쁜 예에서는 user.name을 변경하면 map을 다시 돌면서 TodosView 컴포넌트들의 가상 DOM을 하나씩 하나씩 비교를 합니다.</p>\n<p>좋은 예에서는 user.name을 변경하면 TodosView 컴포넌트의 가상 DOM과 비교합니다.</p>\n<p>다시 렌더링은 되지는 않지만 여러개를 비교하느냐 한개만 비교하느냐의 차이인 겁니다.</p>\n<h3>배열 인덱스를 키로 사용하지 마세요.</h3>\n<p>이 내용 역시 React와 비슷하군요.</p>\n<h3>역참조는 최대한 늦게 하세요.</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 느린 예시</span>\n<span class=\"token operator\">&lt;</span>DisplayName name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// 빠른 예시</span>\n<span class=\"token operator\">&lt;</span>DisplayName person<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>","frontmatter":{"title":"React에서 MobX를 제대로 사용했나?","date":"August 01, 2023","update":"August 01, 2023","tags":["MobX","observable","React","상태관리","mobx action"],"series":"제대로 MobX를 사용하고 있습니까?"},"fields":{"slug":"/react-mobx-correctly/","readingTime":{"minutes":11.705}}},"seriesList":{"edges":[{"node":{"id":"31de2775-a601-59bc-8c08-d1ec78a276d2","fields":{"slug":"/useing-mobx-correctly/"},"frontmatter":{"title":"MobX Core 개념 제대로 사용하고 있습니까? "}}},{"node":{"id":"71de7e2f-f425-5958-9f91-8b6b742fa727","fields":{"slug":"/react-mobx-correctly/"},"frontmatter":{"title":"React에서 MobX를 제대로 사용했나?"}}}]},"previous":{"fields":{"slug":"/useing-mobx-correctly/"},"frontmatter":{"title":"MobX Core 개념 제대로 사용하고 있습니까? "}},"next":{"fields":{"slug":"/storage/"},"frontmatter":{"title":"브라우저 저장소 어떤 상황에서 사용하나요? "}}},"pageContext":{"id":"71de7e2f-f425-5958-9f91-8b6b742fa727","series":"제대로 MobX를 사용하고 있습니까?","previousPostId":"31de2775-a601-59bc-8c08-d1ec78a276d2","nextPostId":"ef77ef59-9f26-515c-9d32-37a3b833f51e"}},"staticQueryHashes":[]}